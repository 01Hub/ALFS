<?xml version="1.0"?>
<sect1 id="elem_version">
<title>version</title>

<sect2><title>Syntax</title>

<synopsis>&lt;!ELEMENT version       (#PCDATA)>
&lt;!ATTLIST variable
          condition (eq|ne|gt|ge|lt|le) #REQUIRED>
</synopsis>

<para>This element occurs in the elements
<link linkend="elem_utilizes">utilizes</link> and
<link linkend="elem_requires">requires</link>.
</para>

</sect2>

<sect2><title>Description</title>
<para>The element <token>version</token> describes a constraint
on the version of an utilized/required package.</para>

<para>The condition is satisfied if the comparison specified
by the attribute <token>condition</token> applies between the 
actual version value of the package, and the value specified
as the content of the element.</para>

<para>When performing the comparison, the sequences of digits are
compared numerically, while all the other characters are compared using
their codes. Moreover, any substring is greater than the empty string.</para>

<para>That means, for instance, that 2.0.10 is greater than 2.0.9,
2.0a is greater than 2.0 and 2.10 is greater than 2.1a.</para>

<para>Note that the algorithm fails for reasonable interpretations of
version numbers like 3.0 and 3.0beta. Intuitively, 3.0 is greater than
3.0beta, but the algorithm returns the opposite.
To indicate for instance that
the required package must have a version greater than 3.0, one would need
two <token>version</token> elements, to require that the actual version be greater
than or equals to 3.0, and that it be different from 3.0beta.</para>

</sect2>

<sect2><title>Examples</title>
<programlisting>
&lt;packageinfo>
    &lt;requires>
        &lt;name>guile&lt;/name>
	&lt;version condition="ge">1.5&lt;version>
    &lt;/requires>
&lt;/packageinfo>
</programlisting>

<para>This signifies that the package being build requires
guile in its version 1.5 or more recent.</para>


</sect2>
</sect1>
