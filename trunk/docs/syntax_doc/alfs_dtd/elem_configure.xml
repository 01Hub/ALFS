<sect1 id="elem_configure" xreflabel="Element&nbsp;: &lt;configure&gt;">
<?dbhtml filename="elem_configure.html" dir="alfs_dtd"?>
<title>Element&nbsp;: &lt;configure&gt;</title>

<sect2>
<title>Syntax</title>

<synopsis>
&lt;!ELEMENT configure     ((param | prefix)*)&gt;
&lt;!ATTLIST configure
          base             CDATA #IMPLIED
          command          CDATA #IMPLIED&gt;
</synopsis>

<para>This element is an element of&nbsp;:&nbsp;&nbsp;

<xref linkend="elem_alfs"/>&nbsp;&nbsp;|&nbsp;&nbsp;
<xref linkend="elem_stage"/>
</para>

<para>See also&nbsp;:&nbsp;&nbsp;

<xref linkend="elem_param"/>&nbsp;&nbsp;|&nbsp;&nbsp;
<xref linkend="elem_prefix"/>
</para>

</sect2>

<sect2>
<title>Description</title>

<para>The element <filename>configure</filename> is one of the many main
operation elements. The element <filename>configure</filename> is used to
describe the command <command>configure</command>.</para>

<para>Notice that all the elements <filename>param</filename> and
<filename>prefix</filename> are surrounded by parathensis
[&nbsp;(&nbsp;)&nbsp;] and followed by an asterisk [&nbsp;*&nbsp;]. The
asterisk signifies that each element can be used optionally inside the
<filename>configure</filename> declaration in a profile and that, if used,
they can be used more than once.</para>

<para>When processing the element, one executes the command
<command>./configure</command> with the parameter(s) and prefix(es) specified.</para>

<para>The attribute <filename>base</filename> allows you to specify the
directory in which the command is executed. See
<xref linkend="elem_base"/>.</para>

<para>The attribute <filename>command</filename> allows you to specify a
custom command if you doen't want to use the default
<command>./configure</command>. This is extremely usefull when running
<command>./configure</command> in a build directory outside the main source
directory.  The packages <filename>gcc</filename> and
<filename>glibc</filename> often require this.</para>

</sect2>

<sect2>
<title>Examples</title>

<para>This example calls to <filename>configure</filename> without any
parameters :</para>

<screen><userinput>&lt;configure base=&quot;/usr/src/mypackage/&quot;&gt;
&lt;/configure&gt;
</userinput></screen>

<para>The equivalent bash script is :</para>

<screen><userinput>echo Executing configure
cd /usr/src/mypackage/
<command>./configure</command></userinput></screen>

<para>This example calls <filename>configure</filename> with a parameter :
</para>

<screen><userinput>&lt;configure base=&quot;/usr/src/mypackage/&quot;&gt;
	&lt;prefix&gt;CFLAGS=&quot;...&quot;&lt;prefix&gt;
	&lt;prefix&gt;CXXFLAGS=&quot;...&quot;&lt;prefix&gt;
	&lt;param&gt;--prefix=/opt/mypackage&lt;/param&gt;
&lt;/configure&gt;</userinput></screen>

<para>The equivalent bash script is :</para>

<screen><userinput>echo Executing configure
cd /usr/src/mypackage/
<command>./configure --prefix=/opt/mypackage</command></userinput></screen>

<para>This example calls <filename>configure</filename> with a parameter and
an explicit command :</para>

<screen><userinput>&lt;configure base=&quot;/usr/src/mypackage/&quot; command=&quot;PATH=/usr/local/bin ./configure&quot;&gt;
	&lt;param&gt;--prefix=/opt/mypackage&lt;/param&gt;
&lt;/configure&gt;</userinput></screen>

<para>The equivalent bash script is :</para>

<screen><userinput>echo Executing configure
cd /usr/src/mypackage/
<command>PATH=/usr/local/bin ./configure --prefix=/opt/mypackage</command></userinput></screen>

</sect2>

</sect1>
