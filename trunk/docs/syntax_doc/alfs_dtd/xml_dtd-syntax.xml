<sect1 id="xml_dtd-syntax" xreflabel="XML DTD Syntax">
<?dbhtml filename="xml_dtd-syntax.html" dir="alfs_dtd"?>
<title>XML DTD Syntax</title>

<sect2>
<title>Quick Introduction to XML</title>

<para>To ensure that all readers of the &book-product; get as much as
possible from its contents, it is necessary to provide a quick introduction
to the concepts of <acronym>XML</acronym> and <acronym>DTD</acronym>
syntax. The eXtensible Markup Language is very powerful and easy to use and
understand.</para>

<note><para>This introduction provides very few examples.  This book is
written in an <acronym>XML</acronym> <acronym>DTD</acronym> called DocBook
<acronym>XML</acronym>.  For an example of <acronym>XML</acronym> just look
at the book's source.  Since this book is documenting an
<acronym>XML</acronym> <acronym>DTD</acronym>, look at the rest of the
book's contents for examples of <acronym>DTD</acronym>
syntax.</para></note>

<para>To begin, here are some basic rules of
<acronym>XML</acronym>&nbsp;:</para>

<itemizedlist>

<listitem><para><acronym>XML</acronym> documents use a self-describing and
simple to use syntax.</para></listitem>

<listitem><para>All <acronym>XML</acronym> elements must have a closing
tag. With <acronym>XML</acronym>, it is illegal to omit the closing
tag.</para></listitem>

<listitem><para><acronym>XML</acronym> tags are case
sensitive.</para></listitem>

<listitem><para>All <acronym>XML</acronym> elements must be properly
nested. Improper nesting of tags makes no sense to
<acronym>XML</acronym>.</para></listitem>

<listitem><para>All <acronym>XML</acronym> documents must have a root
element. In other words, all <acronym>XML</acronym> documents must contain
a single tag pair to define a root element.</para></listitem>

<listitem><para>Attribute values must always be quoted. With
<acronym>XML</acronym>, it is illegal to omit quotation marks around
attribute values.</para></listitem>

<listitem><para>With <acronym>XML</acronym>, white space is
preserved.</para></listitem>

<listitem><para>With <acronym>XML</acronym>,
<filename><acronym>CR</acronym></filename> /
<filename><acronym>LF</acronym></filename> is converted to
<filename><acronym>LF</acronym></filename></para></listitem>

</itemizedlist>

</sect2>

<sect2>
<title>XML Elements and Attributes</title>

<para><acronym>XML</acronym> is designed to hold any kind of information.
This information is stored in Elements.  Elements are the basic building
blocks of <acronym>XML</acronym> and are represented in an
<acronym>XML</acronym> documents as tag pairs.  Attributes provide a
mechanism to further define or classify an element.  Elements have
relationships with other elements in a document.  Some are parents and some
are children.  Using this symantic description, one can see that children
elements need parent elements defined and used first.  As mentioned in the
last section, an <acronym>XML</acronym> document must have a root element.
Think of this as the ultimate parent element.  It must be defined and used
before all other elements and all sub-elements (children) will reside
inside of the root element.  An element can have element content, mixed
content, simple content, empty content or attributes.</para>

<para><acronym>XML</acronym> elements must follow these naming
rules&nbsp;:</para>

<itemizedlist>

<listitem><para>Names can contain letters, numbers, and other
characters</para></listitem>

<listitem><para>Names must not start with a number or punctuation
character</para></listitem>

<listitem><para>Names must not start with the letters xml (or XML or Xml
...)</para></listitem>

<listitem><para>Names cannot contain spaces</para></listitem>

</itemizedlist>

</sect2>

<sect2>
<title>Quick Introduction to <acronym>DTD</acronym> Syntax</title>

<para>Once an <acronym>XML</acronym> document is written, it is generally a
good idea to validate the elements used in the document against a known
<acronym>DTD</acronym>.  The Document Type Definition is the mechanism with
which one validates the content of a well-formed <acronym>XML</acronym>
document.</para>

<para><acronym>XML</acronym> <acronym>DTD</acronym> files
contain&nbsp;:</para>

<itemizedlist>

<listitem><para>Element declarations and definitions&nbsp;:&nbsp;Elements
are declared and defined with their relationships in the
<acronym>DTD</acronym> file.</para></listitem>

<listitem><para>Attribute declarations and definitions&nbsp;:&nbsp;Element
classes or attributes are declared and defined in the
<acronym>DTD</acronym> file.</para></listitem>

<listitem><para>Entities&nbsp;:&nbsp;Entities are the same thing as
variables inside a <acronym>DTD</acronym> file or <acronym>XML</acronym>
document.</para></listitem>

<listitem><para><filename><acronym>PCDATA</acronym></filename>&nbsp;:&nbsp;<filename><acronym>PCDATA</acronym></filename>
is Parsed Character DATA. <filename><acronym>PCDATA</acronym></filename> is
text that will be parsed by a parser. Tags inside the text will be treated
as markup and entities will be expanded.</para></listitem>

<listitem><para><filename><acronym>CDATA</acronym></filename>&nbsp;:&nbsp;<filename><acronym>CDATA</acronym></filename>
is Character DATA. <filename><acronym>CDATA</acronym></filename> is text
that will NOT be parsed by a parser. Tags inside the text will NOT be
treated as markup and entities will not be expanded.</para></listitem>

</itemizedlist>

</sect2>

<sect2>
<title><acronym>DTD</acronym> Element Declaration</title>

<para>Elements are declared in the <acronym>DTD</acronym> file using a
simple, but strict syntax.  There are four ways to define an
element&nbsp;:</para>

<itemizedlist>

<listitem><para><filename>EMPTY</filename>&nbsp;:&nbsp;When an element is
declared with the <filename>EMPTY</filename> keyword, it means that the
element will not hold any information.  This is generally used for special
tags like &lt;br&gt;.</para></listitem>

<listitem><para><filename>ANY</filename>&nbsp;:&nbsp;When an element is
declared with the <filename>ANY</filename> keyword, it means that the
element can contain any information that the author wants it to. This
is generally a special case.</para></listitem>

<listitem><para>Character Data&nbsp;:&nbsp;When an element is declared with
either the <filename>PCDATA</filename> or <filename>CDATA</filename>
keywords, it will hold one of the two types of information described
above.</para></listitem>

<listitem><para>With Children&nbsp;:&nbsp;When an element is declared with
the names of other elements in it, this defines a parent-child
relationship. Look in the <acronym>DTD</acronym> for the child element
names to be further defined with the other three ways.</para></listitem>

<listitem><para>Mixed&nbsp;:&nbsp;Some combination of the above four.
Generally this is character data mixed with children.</para></listitem>

</itemizedlist>

<para>When an element is declared with children, it will also define how
the children can be used inside an <acronym>XML</acronym> document.  There
are four ways that children elements can be defined in a
<acronym>DTD</acronym> file&nbsp;: </para>

<itemizedlist>

<listitem><para>One Occurance Only&nbsp;:&nbsp;Example&nbsp;:&nbsp;
<xref linkend="elem_search_replace"/>. The child elements of
&lt;search_replace&gt;&nbsp;&emdash;&nbsp;&lt;file&gt;, &lt;find&gt;, and
&lt;replace&gt; can one be used once. Notice that there are no symbols
after any of the child element names. This is the
identifier.</para></listitem>

<listitem><para>Minimum of One Occurance&nbsp;:&nbsp;Example&nbsp;:&nbsp;
<xref linkend="elem_permissions"/>. One of the child elements of
&lt;permissions&gt;&nbsp;&emdash;&nbsp;&lt;name&gt;, must be used a minimum
of once, but can also be used many times. Notice the plus [&nbsp;+&nbsp;]
symbol after the name. This is the identifier.</para></listitem>

<listitem><para>Zero or More Occurances&nbsp;:&nbsp;Example&nbsp;:&nbsp;
<xref linkend="elem_download"/>. One of the child elements of
&lt;download&gt;&nbsp;&emdash;&nbsp;&lt;url&gt;, can be used zero or
many times. Notice the asterisk [&nbsp;*&nbsp;] symbol after the name.
This is the identifier.</para></listitem>

<listitem><para>Zero or One Occurance&nbsp;:&nbsp;Example&nbsp;:&nbsp;
<xref linkend="elem_download"/>. One of the child elements of
&lt;download&gt;&nbsp;&emdash;&nbsp;&lt;digest&gt;, can be used zero
or one time only. Notice the question mark [&nbsp;?&nbsp;] symbol after the name.
This is the identifier.</para></listitem>

<listitem><para>Either / Or Occurances&nbsp;:&nbsp;Example&nbsp;:&nbsp;
<xref linkend="elem_execute"/>. One of the two child elements of
&lt;execute&gt;&nbsp;&emdash;&nbsp;&lt;param&gt;, or &lt;prefix&gt;, can
only be used.  Notice the pipe [&nbsp;|&nbsp;] symbol in between the two
elements. This is the identifier.</para></listitem>

</itemizedlist>

</sect2>

<sect2>
<title><acronym>DTD</acronym> Attribute Declaration</title>

</sect2>

</sect1>
